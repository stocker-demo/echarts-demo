{"mappings":";;;;;;AAAA;ACAA;AAyDA,MAAM,8BAAQ,OAAU,MAAgB;IACvC,MAAM,OAAO,MAAM,CAAA,GAAA,sCAAI,EAAE,GAAG,CAAI;IAChC,MAAM,OAAO,KAAK,IAAI;IACtB,OAAO;AACR;AACA,gKAAgK;AAChK,MAAM,6BAAO,CAAC,6JAA6J,CAAC;AAC5K,yEAAyE;AACzE,MAAM,iCAAW,OAAO,MAAgB;IACvC,MAAM,OAAO,MAAM,4BAAuB;IAC1C,MAAM,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAU,CAAA;YAC3C,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;YAC/B,MAAM,KAAK,GAAG;QACf,CAAA;IACA,OAAO;AACR;AACA,mCAAmC;AAEnC,oPAAoP;AACpP,MAAM,6BAAO,CAAC,OACb,CAAC,yOAAyO,EAAE,KAAK,CAAC;AAEnP,MAAM,6BAAO,CAAC,OACb,KAAK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAkB,CAAC,OAAS;QAC/C,MAAM,KAAK,KAAK,KAAK,CAAC;QACtB,MAAM,OAAO,EAAE,CAAC,EAAE;QAClB,MAAM,QAAQ,OAAO,EAAE,CAAC,EAAE;QAC1B,OAAO;YAAC;YAAM;SAAM;IACrB;AAED,MAAM,iCAAW,CAAC,OACjB,4BAAuB,2BAAK,OAAO,IAAI,CAAC;AAEzC,2CAA2C;AAC3C,qDAAqD;AACrD,MAAM,iCAAW,UAAY;IAC5B,MAAM,QAAQ,MAAM,+BAAS;IAC7B,MAAM,OAAO,MAAM,QAAQ,GAAG,CAC7B,MAAM,GAAG,CAAC,OAAO,OAAS;QACzB,MAAM,OAAO,MAAM,+BAAS,KAAK,IAAI;QACrC,OAAO;kBACN;kBACA;QACD;IACD;IAED,OAAO;AACR;AAEO,MAAM,4CAAQ,OAAO,OAAiB;IAC5C,OAAO,IAAI,QAAQ,CAAC,UAAY;QAC/B,WAAW,IAAM;YACP,QAAQ,GAAG,CAAC;YACrB,QAAQ,IAAI;QACb,GAAG;IACJ;AACD;AAEO,MAAM,4CAAQ,CAAC,OAAqB;IAC1C,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,GAAG,OAAO,EAAE;IACtE,OAAO,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,SAAU,CAAC,EAAE,CAAC,EAAE;QAClC,OAAO,KAAK,GAAG,CAAC,SAAU,GAAG,EAAE;YAC9B,OAAO,GAAG,CAAC,EAAE;QACd;IACD;AACD;AAQO,MAAM,4CAAW,UAAY;IAChC,MAAM,OAAO,MAAM;IACnB,MAAM,WAAW,KAAK,GAAG,CAAC,CAAA,KAAI,GAAG,IAAI,CAAC,IAAI;IAC1C,MAAM,SAAS,0CAAM,KAAK,GAAG,CAAC,CAAA,KAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA,OAAM,IAAI,CAAC,EAAE;IAC3D,MAAM,QAAQ,KAAK,GAAG,CAAC,CAAA,KAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA,OAAM,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;IACzD,OAAO;kBACH;eACA;gBACA;IACJ;AACJ;;;AC5IA;AAEO,MAAM,4CAAO,CAAC,QAIf;IACL,MAAM,SAAS,CAAA,GAAA,yCAAK,AAAD,EAAE,MAAM,MAAM;IACjC,MAAM,QAAQ,MAAM,KAAK;IACzB,MAAM,WAAW,MAAM,QAAQ;IAE/B,MAAM,UAAU,OAAO,GAAG,CAAC,CAAC,KAC3B,GAAG,GAAG,CAAC,CAAC,OAAO,QAAU;YACxB,IAAI,QAAQ,GAAG,OAAO;YACtB,OAAO,QAAQ,EAAE,CAAC,QAAQ,EAAE;QAC7B;IAED,OAAO;QACN,QAAQ,CAAA,GAAA,yCAAI,EAAE;eACd;kBACA;IACD;AACD;;;AFhBA,IAAI,iCAAW,SAAS,cAAc,CAAC;AACvC,IAAI,kCAAY,SAAS,cAAc,CAAC;AACxC,IAAI,6BAAO,SAAS,cAAc,CAAC;AACnC,IAAI,gCAAU,oBAAa;AAC3B,IAAI,iCAAW,oBAAa;AAC5B,IAAI;AAEJ,eAAe,0BAAI,KAIlB,EAAE;IACC,IAAI,YAAC,SAAQ,SAAC,MAAK,UAAC,OAAM,EAAC,GAAG;IACjC,IAAI,OAAiB,EAAE;IACvB,+BAAS;QACR,OAAO;YACN,KAAK;QACN;QACA,OAAO;YACN,MAAM;YACN,MAAM;YACN,SAAS,IAAI;YACb,mBAAmB;YACnB,yBAAyB;YACzB,KAAK;QACN;QACA,QAAQ;YACP;gBACC,cAAc,IAAI;gBAClB,MAAM;gBACN,MAAM;gBACN,MAAM;gBACN,OAAO;oBACN,MAAM,IAAI;oBACV,UAAU;oBACV,gBAAgB,IAAI;gBACrB;YACD;SACA;QACD,QAAQ;YACP,MAAM,IAAI;QACX;QACA,mBAAmB;QACnB,yBAAyB;QACzB,iBAAiB;QACjB,uBAAuB;IACxB;IAEA,gCAAU,8BAAQ,SAAS,CAAC;IAE5B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACvC,MAAM,QAAO,MAAM,CAAC,EAAE;QACtB,QAAQ,GAAG,CAAC;QACZ,8BAAQ,SAAS,CAAwB;YACxC,QAAQ;gBACP;oBACC,MAAM;oBACN,MAAA;gBACD;aACA;QACF;QACA,2BAAK,SAAS,GAAG,KAAK,CAAC,EAAE;QACzB,MAAM,CAAA,GAAA,yCAAI,EAAE;IACb;AACD;AAEA,eAAe,2BAAK,KAInB,EAAE;IACC,IAAI,YAAC,SAAQ,SAAC,MAAK,UAAC,OAAM,EAAC,GAAG;IACjC,IAAI,OAAiB,EAAE;IACvB,+BAAS;QACR,OAAO;YACN,KAAK;QACN;QACA,OAAO;YACN,MAAM;YACN,MAAM;YACN,SAAS,IAAI;YACb,mBAAmB;YACnB,yBAAyB;YACzB,KAAK;QACN;QACA,QAAQ;YACP;gBACC,cAAc,IAAI;gBAClB,MAAM;gBACN,MAAM;gBACN,MAAM;gBACN,OAAO;oBACN,MAAM,IAAI;oBACV,UAAU;oBACV,gBAAgB,IAAI;gBACrB;YACD;SACA;QACD,QAAQ;YACP,MAAM,IAAI;QACX;QACA,mBAAmB;QACnB,yBAAyB;QACzB,iBAAiB;QACjB,uBAAuB;IACxB;IAEA,gCAAU,+BAAS,SAAS,CAAC;IAE7B,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACvC,MAAM,QAAO,MAAM,CAAC,EAAE;QACtB,QAAQ,GAAG,CAAC;QACZ,+BAAS,SAAS,CAAwB;YACzC,QAAQ;gBACP;oBACC,MAAM;oBACN,MAAA;gBACD;aACA;QACF;QACA,MAAM,CAAA,GAAA,yCAAI,EAAE;IACb;AACD;AAEA,eAAe,6BAAO;IAClB,IAAI,QAAQ,MAAM,CAAA,GAAA,yCAAQ,AAAD;IACzB,0BAAI;IACJ,2BAAK,CAAA,GAAA,yCAAG,EAAE;AACd;AAEA","sources":["index.ts","fetch.ts","load.ts"],"sourcesContent":["import * as echarts from \"echarts\";\nimport { dealData, sleep } from \"./fetch\";\nimport { load } from \"./load\";\n\ntype EChartsOption = echarts.EChartsOption;\n\nvar chartDom = document.getElementById(\"main\")!;\nvar chartDom2 = document.getElementById(\"main2\")!;\nvar time = document.getElementById(\"time\")!;\nvar myChart = echarts.init(chartDom);\nvar myChart2 = echarts.init(chartDom2);\nvar option: EChartsOption;\n\nasync function run(datas:{\n    category: string[];\n    times: string[];\n    series: number[][];\n}) {\n    let {category,times,series} = datas;\n\tlet data: number[] = [];\n\toption = {\n\t\txAxis: {\n\t\t\tmax: \"dataMax\",\n\t\t},\n\t\tyAxis: {\n\t\t\ttype: \"category\",\n\t\t\tdata: category,\n\t\t\tinverse: true,\n\t\t\tanimationDuration: 300,\n\t\t\tanimationDurationUpdate: 300,\n\t\t\tmax: 20, // only the largest 3 bars will be displayed\n\t\t},\n\t\tseries: [\n\t\t\t{\n\t\t\t\trealtimeSort: true,\n\t\t\t\tname: \"对比\",\n\t\t\t\ttype: \"bar\",\n\t\t\t\tdata: data,\n\t\t\t\tlabel: {\n\t\t\t\t\tshow: true,\n\t\t\t\t\tposition: \"right\",\n\t\t\t\t\tvalueAnimation: true,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tlegend: {\n\t\t\tshow: true,\n\t\t},\n\t\tanimationDuration: 2000,\n\t\tanimationDurationUpdate: 2000,\n\t\tanimationEasing: \"linear\",\n\t\tanimationEasingUpdate: \"linear\",\n\t};\n\n\toption && myChart.setOption(option);\n\n\tfor (let i = 0; i < series.length; i++) {\n\t\tconst data = series[i];\n\t\tconsole.log(\"set new data\");\n\t\tmyChart.setOption<echarts.EChartsOption>({\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"bar\",\n\t\t\t\t\tdata,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t\ttime.innerHTML = times[i];\n\t\tawait sleep(2000);\n\t}\n}\n\nasync function run2(datas:{\n    category: string[];\n    times: string[];\n    series: number[][];\n}) {\n    let {category,times,series} = datas;\n\tlet data: number[] = [];\n\toption = {\n\t\txAxis: {\n\t\t\tmax: \"dataMax\",\n\t\t},\n\t\tyAxis: {\n\t\t\ttype: \"category\",\n\t\t\tdata: category,\n\t\t\tinverse: true,\n\t\t\tanimationDuration: 300,\n\t\t\tanimationDurationUpdate: 300,\n\t\t\tmax: 20, // only the largest 3 bars will be displayed\n\t\t},\n\t\tseries: [\n\t\t\t{\n\t\t\t\trealtimeSort: true,\n\t\t\t\tname: \"五分钟内排名\",\n\t\t\t\ttype: \"bar\",\n\t\t\t\tdata: data,\n\t\t\t\tlabel: {\n\t\t\t\t\tshow: true,\n\t\t\t\t\tposition: \"right\",\n\t\t\t\t\tvalueAnimation: true,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tlegend: {\n\t\t\tshow: true,\n\t\t},\n\t\tanimationDuration: 2000,\n\t\tanimationDurationUpdate: 2000,\n\t\tanimationEasing: \"linear\",\n\t\tanimationEasingUpdate: \"linear\",\n\t};\n\n\toption && myChart2.setOption(option);\n\n\tfor (let i = 0; i < series.length; i++) {\n\t\tconst data = series[i];\n\t\tconsole.log(\"set new data\");\n\t\tmyChart2.setOption<echarts.EChartsOption>({\n\t\t\tseries: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"bar\",\n\t\t\t\t\tdata,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t\tawait sleep(2000);\n\t}\n}\n\nasync function main() {\n    let datas = await dealData();\n    run(datas);\n    run2(load(datas));\n}\n\nmain();\n","import axios from \"axios\";\n\ndeclare module List {\n\texport interface Diff {\n\t\tf12: string;\n\t\tf13: number;\n\t\tf14: string;\n\t\tf62: number;\n\t}\n\n\texport interface Data {\n\t\ttotal: number;\n\t\tdiff: Diff[];\n\t}\n\n\texport interface RootObject {\n\t\trc: number;\n\t\trt: number;\n\t\tsvr: number;\n\t\tlt: number;\n\t\tfull: number;\n\t\tdlmkts: string;\n\t\tdata: Data;\n\t}\n}\n\ndeclare module Flow {\n\texport interface Period {\n\t\tb: any;\n\t\te: any;\n\t}\n\n\texport interface TradePeriods {\n\t\tpre?: any;\n\t\tafter?: any;\n\t\tperiods: Period[];\n\t}\n\n\texport interface Data {\n\t\tcode: string;\n\t\tmarket: number;\n\t\tname: string;\n\t\ttradePeriods: TradePeriods;\n\t\tklines: string[];\n\t}\n\n\texport interface RootObject {\n\t\trc: number;\n\t\trt: number;\n\t\tsvr: number;\n\t\tlt: number;\n\t\tfull: number;\n\t\tdlmkts: string;\n\t\tdata: Data;\n\t}\n}\n\nconst fetch = async <T>(url: string) => {\n\tconst data = await axios.get<T>(url);\n\tconst json = data.data as T;\n\treturn json;\n};\n// https://push2.eastmoney.com/api/qt/clist/get?pn=1&pz=500&po=1&np=1&fields=f12%2Cf13%2Cf14%2Cf62&fid=f62&fs=m%3A90%2Bt%3A2&ut=b2884a393a59ad64002292a3e90d46a5\nconst list = `https://push2.eastmoney.com/api/qt/clist/get?pn=1&pz=500&po=1&np=1&fields=f12%2Cf13%2Cf14%2Cf62&fid=f62&fs=m%3A90%2Bt%3A2&ut=b2884a393a59ad64002292a3e90d46a5`;\n// fetch<List.RootObject>(list).then(data => console.log(data.data.diff))\nconst codeList = async (url: string) => {\n\tconst list = await fetch<List.RootObject>(url);\n\tconst codes = list.data.diff.map((item) => ({\n\t\tcode: `${item.f13}.${item.f12}`,\n\t\tname: item.f14,\n\t}));\n\treturn codes;\n};\n// codeList(list).then(console.log)\n\n//https://push2.eastmoney.com/api/qt/stock/fflow/kline/get?lmt=0&klt=1&fields1=f1%2Cf2%2Cf3%2Cf7&fields2=f51%2Cf52%2Cf53%2Cf54%2Cf55%2Cf56%2Cf57%2Cf58%2Cf59%2Cf60%2Cf61%2Cf62%2Cf63%2Cf64%2Cf65&ut=b2884a393a59ad64002292a3e90d46a5&secid=90.BK1042\nconst flow = (code: string) =>\n\t`https://push2.eastmoney.com/api/qt/stock/fflow/kline/get?lmt=0&klt=1&fields1=f1%2Cf2%2Cf3%2Cf7&fields2=f51%2Cf52%2Cf53%2Cf54%2Cf55%2Cf56%2Cf57%2Cf58%2Cf59%2Cf60%2Cf61%2Cf62%2Cf63%2Cf64%2Cf65&ut=b2884a393a59ad64002292a3e90d46a5&secid=${code}`;\n\nconst deal = (data: Flow.RootObject) =>\n\tdata.data.klines.map<[string,number]>((item) => {\n\t\tconst it = item.split(\",\");\n\t\tconst time = it[0];\n\t\tconst price = Number(it[1]);\n\t\treturn [time, price];\n\t});\n\nconst flowData = (code: string) =>\n\tfetch<Flow.RootObject>(flow(code)).then(deal);\n\n// flowData(\"90.BK1042\").then(console.log);\n// codeList(list).then((codes) =>codes.map(flowData))\nconst dealFlow = async () => {\n\tconst codes = await codeList(list);\n\tconst data = await Promise.all(\n\t\tcodes.map(async (code) => {\n\t\t\tconst data = await flowData(code.code);\n\t\t\treturn {\n\t\t\t\tcode,\n\t\t\t\tdata,\n\t\t\t};\n\t\t})\n\t);\n\treturn data;\n};\n\nexport const sleep = async (time: number) => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(() => {\n            console.log(\"sleep!\")\n\t\t\tresolve(null);\n\t\t}, time);\n\t});\n};\n\nexport const reset = (data: number[][]) => {\n\tif (data[0].length !== data[1].length || data[0].length < 1) return [];\n\treturn data[0].map(function (_, i) {\n\t\treturn data.map(function (row) {\n\t\t\treturn row[i];\n\t\t});\n\t});\n};\n\n// const dd = [\n//     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n//     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// ]\n// console.log(reset(dd))\n\nexport const dealData = async () => {\n    const data = await dealFlow();\n    const category = data.map(it=>it.code.name)\n    const series = reset(data.map(it=>it.data.map(item=>item[1])))\n    const times = data.map(it=>it.data.map(item=>item[0]))[0]\n    return {\n        category,\n        times,\n        series\n    }\n}\n\n","import { reset } from \"./fetch\";\n\nexport const load = (datas: {\n\tcategory: string[];\n\ttimes: string[];\n\tseries: number[][];\n}) => {\n\tconst series = reset(datas.series);\n\tconst times = datas.times;\n\tconst category = datas.category;\n\n\tconst series2 = series.map((it) =>\n\t\tit.map((value, index) => {\n\t\t\tif (index < 5) return value;\n\t\t\treturn value - it[index - 5];\n\t\t})\n\t);\n\treturn {\n\t\tseries: reset(series2),\n\t\ttimes,\n\t\tcategory,\n\t};\n};\n"],"names":[],"version":3,"file":"index.js.map"}